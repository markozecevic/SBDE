d<-sapply(analyses, function(x) x@analysis_results[features,"q_value"])
d<-apply(analyses, function(x) x@analysis_results[features,"q_value"])
d<-lapply(analyses, function(x) x@analysis_results[features,"q_value"])
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]))
View(d)
?data.frame
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]), colnames = coln)
View(d)
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]), names = coln)
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]))
names(d)
names(d) <- coln
View(d)
is.na(d) <- 1
View(d)
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]))
names(d) <- coln
d[is.na(d)] <- 1
View(d)
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]))
names(d) <- coln
View(d)
d[is.na(d)] <- 1
View(d)
devtools::load_all()
plotVenn(analysis, 0.5)
plotVenn(analyses, 0.5)
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]<=alpha))
alpha <- 0.05
d <- data.frame(row.names = features, sapply(analyses, function(x) x@analysis_results[features,"q_value"]<=alpha))
View(d)
names(d) <- coln
d[is.na(d)] <- FALSE
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
View(d)
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
View(d)
devtools::load_all()
plotVenn(analyses)
plotVenn(analyses, 0.05)
devtools::use_package("VennDiagram", "Imports")
?grid.newpage()
VennDiagram::grid.newpage()
devtools::use_package("grid", "Imports")
grid::grid.newpage()
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
plotVenn(analyses, 0.05)
devtools::load_all()
plotVenn(analyses, 0.05)
plotVenn(analyses, 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange"))
plotVenn(analyses, 0.05, lty = "blank", fill = c("skyblue", "pink1"))
?VennDiagram
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
save(DEA1, file = "DEA1.RData")
save(DEA2, file = "DEA2.RData")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
setwd("~/R/SBDE/testscr")
load("~/R/SBDE/testscr/DEA1.RData")
devtools::load_all()
load("~/R/SBDE/testscr/DEA1.RData")
load("~/R/SBDE/testscr/DEA2.RData")
plotVenn(analyses = c(DEA1, DEA2), 0.05, lty = "blank", fill = c("skyblue", "pink1"))
.libPaths()
lapply(.libPaths(), dir)
getwd()
devtools::load_all()
devtools::use_package("grid", "Imports")
devtools::use_package("sevenbridges", "Imports") # adds to description
devtools::use_package("tools", "Imports")
devtools::use_package("VennDiagram", "Imports")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
your_token <- "29dd0f0d333e473cbb094e8b1014e0d1"
your_project <- "marko_zecevic/sbde-test"
your_platform <- "https://api.sbgenomics.com/v2"
DEA3 <- newDEA("Star_and_cuffdiff", your_token, your_project, your_platform, align_wf = "star", de_wf = "cufflinks")
DEA3
DEA3 <- align(DEA1, should_run = TRUE)
DEA3 <- align(DEA3, should_run = TRUE)
devtools::load_all()
DEA3 <- align(DEA3, should_run = TRUE)
analysis <- DEA3
p <- analysis@project
files <- p$file(complete = TRUE)
appid <- paste0(p$id,"/star-alignment")
app <- tryCatch({
p$app(id = appid)
},
error = function(cond) {
cwl_fl <- system.file("cwl", "rna-seq-alignment-star.json", package = "SBDE")
p$app_add(short_name = "star-alignment", filename = cwl_fl)
})
fastqs_in <- files[which(sapply(files, function (x) x$name) %in% rownames(analysis@sample_reads))]
fasta_in <- files[[which(sapply(files, function (x) x$name) == analysis@reference)]]
gtf_in <- files[[which(sapply(files, function (x) x$name) == analysis@annotation)]]
app <- p$app(id = "marko_zecevic/sbde-test/star-alignment/")
noInputs <- length(app$raw$inputs)
for (i in 1:noInputs) {
cat(app$raw$inputs[[i]]$id)
cat("\n")
}
DEA3 <- align(DEA3, should_run = TRUE)
DEA3@aligned_reads <- list_bam(DEA3)
DEA3
DEA3@aligned_reads$condition <- c("untreated", "untreated", "treated", "treated", "untreated", "treated", "treated", "untreated")
DEA3
DEA3 <- analyzeForDE(DEA3, should_run = TRUE)
DEA4 <- newAnalysisAlreadyAligned(DEA3, "Star_and_DESeq2", "deseq2")
DEA4 <- analyzeForDE(DEA4, should_run = TRUE)
DEA4 <- readResults(DEA4)
load("~/R/SBDE/testscr/DEA1.RData")
load("~/R/SBDE/testscr/DEA2.RData")
plotVenn(analyses = c(DEA1, DEA2, DEA4), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid"))
devtools::load_all()
plotVenn(analyses = c(DEA1, DEA2, DEA4), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid"))
DEA5 <- newDEA("Hisat_and_cuffdiff", your_token, your_project, your_platform, align_wf = "hisat", de_wf = "cufflinks")
Q
DEA5 <- newDEA("Hisat_and_cuffdiff", your_token, your_project, your_platform, align_wf = "hisat2", de_wf = "cufflinks")
DEA5
DEA5 <- newDEA("Hisat_and_cuffdiff", your_token, your_project, your_platform, align_wf = "hisat2", de_wf = "cufflinks")
DEA5
DEA5 <- align(DEA5, should_run = TRUE)
getwd()
path <- "/Users/marko/R/gene_exp.diff"
x <- readLines(path)
x
y <- gsub("(1 of many)", "", x, fixed = TRUE)
# NEEDS TO BE SAVED IN SOME TEMP FILES FOLDER
new_path <- paste0(tools::file_path_sans_ext(path), "_mod.", tools::file_ext(path))
cat(y, file=new_path, sep="\n")
DEA5@aligned_reads <- list_bam(DEA5)
DEA5
DEA5@aligned_reads$condition <- c("untreated", "untreated", "treated", "treated", "untreated", "treated", "treated", "untreated")
DEA5
DEA5 <- analyzeForDE(DEA5, should_run = TRUE)
DEA6 <- newAnalysisAlreadyAligned(DEA5, "Hisat_and_DESeq2", "deseq2")
DEA6 <- analyzeForDE(DEA6, should_run = TRUE)
DEA5 <- analyzeForDE(DEA5, should_run = TRUE)
DEA6 <- readResults(DEA6)
plotVenn(analyses = c(DEA1, DEA2, DEA4, DEA6), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange"))
setwd("~/R/SBDE/testscr")
save(DEA4, file = "DEA4.RData")
save(DEA6, file = "DEA6.RData")
sessionInfo()
library(grid)
sessionInfo()
package?grid
devtools::use_package("methods", "Imports") # adds to description
DEA3 <- readResults(DEA3)
save(DEA3, file = "DEA3.RData")
plotVenn(analyses = c(DEA1, DEA2, DEA3, DEA4, DEA6), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3"))
DEA5 <- readResults(DEA5)
DEA5@title
save(DEA5, file = "DEA5.RData")
plotVenn(analyses = c(DEA1, DEA3, DEA5), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange"))
plotVenn(analyses = c(DEA1, DEA3, DEA5), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid"))
source("https://bioconductor.org/biocLite.R")
biocLite("cummeRbund")
library(cummeRbund)
?readCufflinks
setwd("~/R/customer_support")
setwd("~/R/customer_support/cuffdiff_output")
a <- readCufflinks()
a
package?cummeRbund
sessionInfo()
file.path(R.home("doc"), "KEYWORDS")
?read.csv
devtools::load_all()
setwd("~/R/SBDE")
devtools::load_all()
devtools::load_all()
devtools::load_all()
?align
devtools::document() # use roxygen to make documentation and add stuff to namespace
?align
?`summary,BigWigFile-method`
?align
devtools::document() # use roxygen to make documentation and add stuff to namespace
package?SBDE
devtools::load_all()
package?SBDE
?SBDE
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?SBDE
?DataTrack
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?DifferentialExpressionAnalysis
?ln
?lm
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?DifferentialExpressionAnalysis
?DifferentialExpressionAnalysis
setwd("~/R/SBDE/testscr")
load("~/R/SBDE/testscr/DEA1.RData")
DEA1@title
DEA1
load("~/R/SBDE/testscr/DEA2.RData")
load("~/R/SBDE/testscr/DEA3.RData")
load("~/R/SBDE/testscr/DEA4.RData")
load("~/R/SBDE/testscr/DEA5.RData")
load("~/R/SBDE/testscr/DEA6.RData")
plotVenn(analyses = c(DEA1, DEA3, DEA5), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid"))
plotVenn(analyses = c(DEA1, DEA2, DEA3, DEA4), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange"))
plotVenn(analyses = c(DEA1, DEA2, DEA3, DEA4, DEA6), 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3"))
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?DifferentialExpressionAnalysis
?newDEA
?c
c{SummarizedExperiment}
SummarizedExperiment::c
?c
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?newDEA
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
?plotVenn
x <- show(DEA1)
x
devtools::load_all()
DEA1
DEA1
?show
devtools::load_all()
DEA1
?show.defaukt
?show.default
?cat.default
cat(DEA1)
show(DEA1)
show(DEA1)
devtools::load_all()
show(DEA1)
devtools::load_all("~/R/SBDE")
show(DEA1)
devtools::load_all("~/R/SBDE")
show(DEA1)
DEA1
devtools::load_all("~/R/SBDE")
DEA1
devtools::load_all("~/R/SBDE")
DEA1
devtools::load_all("~/R/SBDE")
DEA1
devtools::load_all("~/R/SBDE")
DEA1
devtools::load_all("~/R/SBDE")
DEA1
DEA@sample_reads
DEA1@sample_reads
devtools::load_all("~/R/SBDE")
devtools::document() # use roxygen to make documentation and add stuff to namespace
devtools::load_all()
devtools::use_vignette("SBDE")
load("~/R/SBDE/testscr/DEA1.RData")
devtools::load_all("~/R/SBDE")
your_token <- "29dd0f0d333e473cbb094e8b1014e0d1"
your_project <- "marko_zecevic/sbde-test"
your_platform <- "https://api.sbgenomics.com/v2"
devtools::load_all()
library(SBDE)
SBDE
pwd
getwd()
devtools::install_local("/Users/marko/R/SBDE/")
?install_local
devtools::install("/Users/marko/R/SBDE/")
library(SBDE)
?SBDE
?library
?newDE
?SBDE::newDE
?newDEA
library(SBDE)
devtools::load_all()
load("~/R/SBDE/testscr/DEA1.RData")
load("~/R/SBDE/testscr/DEA2.RData")
load("~/R/SBDE/testscr/DEA3.RData")
load("~/R/SBDE/testscr/DEA4.RData")
load("~/R/SBDE/testscr/DEA5.RData")
load("~/R/SBDE/testscr/DEA6.RData")
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
# analyze only those genes which are found to be DE at least once
d <- d[rowMeans(d)>0, ]
distance <- dist(t(d))
distance
heatmap(as.matrix(distance))
heatmap(as.matrix(distance), Colv = NA)
heatmap(as.matrix(distance), Rowv = NA)
heatmap(as.matrix(distance), Colv = NA)
heatmap(as.matrix(distance))
?heatmap
heatmap.2
min(distance)
which.min(distance)
distance
?dist
distance[7]
distance[7]$rownames
distance[7]$names
names(distance[7])
?dist
distance[2]
distance[5]
labels(distance[5])
labels(distance[7])
labels(distance)
labels(distance)[7]
plot(hclust(d))
plot(hclust(distance))
?hclust
plot(hclust(distance), hang = -1)
?barplot
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
d <- colSums(d)
d
barplot(d)
d <- sort(colSums(d))
d <- sort(colSums(d), decreasing = FALSE)
d <- order(colSums(d), decreasing = FALSE)
colSums(d)
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
d <- order(colSums(d), decreasing = FALSE)
d
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
d <- sort(colSums(d), decreasing = FALSE)
d
barplot(d, ...)
barplot(d)
barplot(d, horiz = TRUE)
barplot(d, names.arg = colnames(d))
barplot(d, names.arg = c(1,2,3,4,5,6)
)
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
fill_colors = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3", "firebrick2")
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
d <- sort(colSums(d), decreasing = FALSE)
barplot(d, col = fill_colors)
barplot(d, names.arg = NULL, col = fill_colors)
barplot(d, names.arg = NA, col = fill_colors)
colnames(d)
d
colnames(d)
names(d)
legend("topleft", names(d), fill = fill_colors, bty = "n")
barplot(d, names.arg = NA, col = fill_colors, legend.text = names(d))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE)
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "bottomright", bty = "n"))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "topright", bty = "n"))
?args.legend
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "topright"))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "bottomright"))
strwidth(names(d))
max(strwidth(names(d)))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "bottomright", text.width = max(strwidth(names(d)))))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "bottomright", text.width = 2*max(strwidth(names(d)))))
barplot(d, names.arg = NA, col = fill_colors, legend.text = TRUE, args.legend = list(x = "bottomright", text.width = 1.6*max(strwidth(names(d)))))
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
your_token <- "29dd0f0d333e473cbb094e8b1014e0d1"
your_project <- "marko_zecevic/sbde-test"
your_platform <- "https://api.sbgenomics.com/v2"
testDEA <- newDEA("Hisat_and_cuffdiff", your_token, your_project, your_platform,
align_wf = "hisat2", de_wf = "cufflinks")
testDEA
testDEA@alignment_task <- "60d9459c-9271-480f-a4e4-70e4adc42b3b"
setwd("~/R/SBDE/testscr")
save(testDEA, file = "testDEAaligned.RData")
testDEA@alignment_task
testDEA@aligned_reads <- list_bam(testDEA)
testDEA@aligned_reads
testDEA@aligned_reads$condition <- c("untreated", "untreated", "treated", "treated", "untreated", "treated", "treated", "untreated")
testDEA@aligned_reads
testDEA <- analyzeForDE(testDEA, should_run = TRUE)
testDEA <- newDEA("Hisat_and_DESeq2", your_token, your_project, your_platform,
align_wf = "hisat2", de_wf = "deseq2")
testDEA
testDEA@alignment_task <- "60d9459c-9271-480f-a4e4-70e4adc42b3b"
save(testDEA, file = "testDEAaligned.RData")
testDEA@aligned_reads <- list_bam(testDEA)
testDEA@aligned_reads
testDEA@aligned_reads$condition <- c("untreated", "untreated", "treated", "treated", "untreated", "treated", "treated", "untreated")
testDEA@aligned_reads
testDEA <- analyzeForDE(testDEA, should_run = TRUE)
save(testDEA, file = "testDEAquantified.RData")
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
sapply(analyses, function (x) x@title)
plotVenn(analyses[-4], 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3"))
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
fill = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3", "firebrick2")
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
o <- order(colSums(d), decreasing = FALSE)
o
d <- d[o]
d
View(d)
fill
fill[o]
barplot(d, names.arg = NA, col = fill[o], legend.text = TRUE, main = "Number of differentially expressed genes",
args.legend = list(x = "bottomright", text.width = max(strwidth(names(d)))))
d
analyses <- c(DEA1, DEA2, DEA3, DEA4, DEA5, DEA6)
alpha <- 0.05
fill = c("skyblue", "pink1", "mediumorchid", "orange", "chartreuse3", "firebrick2")
n <- length(analyses)
coln <- sapply(analyses, function(x) x@title)
features = character(0)
for (i in 1:n) {
features <- c(features, rownames(analyses[[i]]@analysis_results))
}
features <- sort(unique(features))
d <- data.frame(row.names = features, sapply(analyses, function(x) 1*(x@analysis_results[features,"q_value"]<=alpha)))
names(d) <- coln
d[is.na(d)] <- 0
o <- order(colSums(d), decreasing = FALSE)
d <- colSums(d)[o]
barplot(d, names.arg = NA, col = fill[o], legend.text = TRUE, main = "Number of differentially expressed genes",
args.legend = list(x = "bottomright", text.width = max(strwidth(names(d)))))
}
plotVenn(analyses[-4], 0.05, lty = "blank", fill = c("skyblue", "pink1", "mediumorchid",
"chartreuse3", "firebrick2"))
?draw.quintuple.venn
setwd("~/R/SBDE")
devtools::build()
devtools::build_vignettes()
