{
  "sbg:project": "marko_zecevic/sbde1",
  "sbg:canvas_x": 194,
  "steps": [
    {
      "sbg:y": 394.3333692815576,
      "run": {
        "baseCommand": [
          "/opt/bowtie2-2.2.6/bowtie2-build",
          "-f"
        ],
        "sbg:project": "bix-demo/bowtie2-2-2-6-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "x": 397.3333289755707,
        "sbg:categories": [
          "Alignment",
          "Indexing"
        ],
        "temporaryFailCodes": [],
        "sbg:toolkitVersion": "2.2.6",
        "label": "Bowtie2 Indexer",
        "outputs": [
          {
            "sbg:fileTypes": "BT2",
            "outputBinding": {
              "sbg:metadata": {
                "__inherit__": "fasta_reference"
              },
              "streamable": false,
              "glob": {
                "script": "{ \n  if ($job.inputs.large_index)\n  {\n    return \"*.bt2l\"\n  }\n  else\n  {\n    return \"*.bt2\"\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "description": "Bowtie index files (.bt2).",
            "label": "Bowtie index files",
            "id": "#bowtie_index_files",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ]
          }
        ],
        "requirements": [
          {
            "engineCommand": "cwl-engine.js",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolAuthor": "Ben Langmead/John Hopkins University",
        "sbg:id": "admin/sbg-public-data/bowtie2-indexer/1",
        "sbg:latestRevision": 1,
        "description": "Bowtie 2 Indexer is a tool for indexing reference genomes of any size used in an alignment. It was built from bowtie2-build script and used for reference genome indexing aimed at assisting Bowtie2 in fast and memory-efficient alignment. It outputs a set of 6 files with suffixes .1.bt2, .2.bt2, .3.bt2, .4.bt2, .rev.1.bt2, and .rev.2.bt2. These files together constitute the index and all should be provided when aligning the reads.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 8,
            "mem": 6000
          },
          "inputs": {
            "difference_cover_period": 6,
            "fasta_reference": {
              "path": "/test/hg19.fa"
            },
            "disable_default_parameters": true
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "029d3a264215",
            "dockerPull": "images.sbgenomics.com/ana_d/bowtie2:2.2.6"
          },
          {
            "value": 8,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 6000,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911540
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911541
          }
        ],
        "stdin": "",
        "sbg:createdOn": 1450911540,
        "class": "CommandLineTool",
        "y": 394.3333692815576,
        "sbg:sbgMaintained": false,
        "sbg:links": [
          {
            "id": "http://bowtie-bio.sourceforge.net/bowtie2/index.shtml",
            "label": "Homepage"
          },
          {
            "id": "http://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.2.6/",
            "label": "Download"
          },
          {
            "id": "http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml",
            "label": "Manual"
          },
          {
            "id": "http://www.nature.com/nmeth/journal/v9/n4/full/nmeth.1923.html",
            "label": "Publication"
          }
        ],
        "sbg:validationErrors": [],
        "inputs": [
          {
            "description": "The maximum number of suffixes allowed in a block, expressed as a fraction of the length of the reference. Setting this option overrides any previous setting for \"Suffixes\", or \"Suffixes as fraction\". This is configured automatically by default; use \"Disable default parameters\" to configure manually.",
            "label": "Suffixes as fraction",
            "sbg:toolDefaultValue": "4",
            "id": "#suffixes_as_fraction",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.disable_default_parameters && $job.inputs.suffixes_as_fraction) {\n    return \"--bmaxdivn \".concat($job.inputs.suffixes_as_fraction)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum number of suffixes allowed in a block. Allowing more suffixes per block makes indexing faster, but increases peak memory usage. Setting this option overrides any previous setting for \"Suffixes\", or \"Suffixes as fraction\". Default (in terms of the \"Suffixes (as fraction)\" parameter) is 4. This is configured automatically by default; use \"Disable default parameters\" to configure manually.",
            "label": "Suffixes",
            "sbg:toolDefaultValue": "-",
            "id": "#suffixes",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.disable_default_parameters && $job.inputs.suffixes) {\n    return \"--bmax \".concat($job.inputs.suffixes)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Set the seed for pseudo-random number generator.",
            "label": "Seed",
            "sbg:toolDefaultValue": "-",
            "id": "#seed",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--seed",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "To map alignments back to positions on the reference sequences, it is necessary to annotate (\"mark\") some or all of the Burrows-Wheeler rows with their corresponding location on the genome. \"Rows to mark\" governs how many rows get marked: the indexer will mark every 2^(given number) rows. Marking more rows makes reference-position lookups faster, but requires more memory to hold the annotations at runtime. The default is 5 (every 32nd row is marked; for human genome, annotations occupy about 340 megabytes).",
            "label": "Rows to mark",
            "sbg:toolDefaultValue": "5",
            "id": "#rows_to_mark",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--offrate",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Use a packed (2-bits-per-nucleotide) representation for DNA strings. This saves memory but makes indexing 2-3 times slower. This is configured automatically by default; set \"Disable default parameters\" to configure manually.",
            "label": "Packed representation",
            "sbg:toolDefaultValue": "False",
            "id": "#packed_representation",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.disable_default_parameters && $job.inputs.packed_representation) {\n    return \"--packed \".concat($job.inputs.packed_representation)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Build only the NAME.3.bt2 and NAME.4.bt2 portions of the index, which contain a bitpacked version of the reference sequences and are used for paired-end alignment.",
            "label": "Only bitpacked files",
            "sbg:toolDefaultValue": "False",
            "id": "#only_bitpacked_files",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--justref",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Force indexer to build a large index, even if the reference is less than ~ 4 billion nucleotides inlong.",
            "label": "Large index",
            "sbg:toolDefaultValue": "False",
            "id": "#large_index",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--large-index",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The ftab is the lookup table used to calculate an initial Burrows-Wheeler range with respect to the first given number of characters of the query. A larger number yields a larger lookup table but faster query times. The ftab has size 4^(given number + 1) bytes. The default setting is 10 (ftab is 4MB).",
            "label": "Ftab lookup table size",
            "sbg:toolDefaultValue": "10",
            "id": "#ftab_lookup_table_size",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--ftabchars",
              "sbg:cmdInclude": true
            }
          },
          {
            "required": true,
            "sbg:fileTypes": "FASTA, FA",
            "description": "Reference sequence to which to align the reads.",
            "label": "FASTA Reference",
            "id": "#fasta_reference",
            "sbg:category": "Input files",
            "type": [
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "position": 100,
              "streamable": false,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Do not build the NAME.3.bt2 and NAME.4.bt2 portions of the index, which contain a bitpacked version of the reference sequences and are used for paired-end alignment.",
            "label": "Discard bitpacked files",
            "sbg:toolDefaultValue": "False",
            "id": "#discard_bitpacked_files",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--noref",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Disable use of the difference-cover sample. Suffix sorting becomes quadratic-time in the worst case (where the worst case is an extremely repetitive reference).",
            "label": "Disable diff-cover sample",
            "sbg:toolDefaultValue": "False",
            "id": "#disable_diff_cover_sample",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--nodc",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Disable the default behavior whereby indexer automatically selects values for the parameters under \"Advanced Options\" according to available memory. Instead, user may specify values for those parameters. If memory is exhausted during indexing, an error message will be printed; it is up to the user to try new parameters.",
            "label": "Disable default parameters",
            "sbg:toolDefaultValue": "False",
            "id": "#disable_default_parameters",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--noauto",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Set the period for the difference-cover sample. A larger period yields less memory overhead, but may make suffix sorting slower, especially if repeats are present. Must be a power of 2 no greater than 4096. This is configured automatically by default; use \"Disable default parameters\" to configure manually.",
            "label": "Difference-cover period",
            "sbg:toolDefaultValue": "1024",
            "id": "#difference_cover_period",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.disable_default_parameters && $job.inputs.difference_cover_period) {\n    return \"--dcv \".concat($job.inputs.difference_cover_period)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:modifiedOn": 1450911541,
        "sbg:cmdPreview": "/opt/bowtie2-2.2.6/bowtie2-build -f --noauto   --dcv 6  /test/hg19.fa  ./hg19 /test/hg19.fa",
        "sbg:modifiedBy": "bix-demo",
        "sbg:revision": 1,
        "id": "admin/sbg-public-data/bowtie2-indexer/1",
        "sbg:toolkit": "Bowtie2",
        "sbg:license": "GNU General Public License v3.0 only",
        "arguments": [
          {
            "separate": true,
            "position": 101,
            "valueFrom": {
              "script": "{\n  basename = $job.inputs.fasta_reference.path.split('.').slice(0, $job.inputs.fasta_reference.path.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n  return \"./\".concat(basename)\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "successCodes": []
      },
      "id": "#Bowtie2_Indexer",
      "sbg:x": 397.3333289755707,
      "outputs": [
        {
          "id": "#Bowtie2_Indexer.bowtie_index_files"
        }
      ],
      "inputs": [
        {
          "id": "#Bowtie2_Indexer.suffixes_as_fraction"
        },
        {
          "id": "#Bowtie2_Indexer.suffixes"
        },
        {
          "id": "#Bowtie2_Indexer.seed"
        },
        {
          "id": "#Bowtie2_Indexer.rows_to_mark"
        },
        {
          "id": "#Bowtie2_Indexer.packed_representation"
        },
        {
          "id": "#Bowtie2_Indexer.only_bitpacked_files"
        },
        {
          "id": "#Bowtie2_Indexer.large_index"
        },
        {
          "id": "#Bowtie2_Indexer.ftab_lookup_table_size"
        },
        {
          "id": "#Bowtie2_Indexer.fasta_reference",
          "source": [
            "#fasta_reference"
          ]
        },
        {
          "id": "#Bowtie2_Indexer.discard_bitpacked_files"
        },
        {
          "id": "#Bowtie2_Indexer.disable_diff_cover_sample"
        },
        {
          "id": "#Bowtie2_Indexer.disable_default_parameters"
        },
        {
          "id": "#Bowtie2_Indexer.difference_cover_period"
        }
      ]
    },
    {
      "sbg:y": 287.2105521842058,
      "run": {
        "baseCommand": [
          "python",
          "/opt/sbg_fastq_quality_scale_detector.py"
        ],
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "x": 276.54391547880846,
        "sbg:categories": [
          "FASTQ-Processing"
        ],
        "temporaryFailCodes": [],
        "label": "SBG FASTQ Quality Detector",
        "outputs": [
          {
            "sbg:fileTypes": "FASTQ",
            "outputBinding": {
              "sbg:metadata": {},
              "glob": "*.fastq"
            },
            "description": "Source FASTQ file with updated metadata.",
            "label": "Result",
            "id": "#result",
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "requirements": [],
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-detector/3",
        "sbg:latestRevision": 3,
        "description": "FASTQ Quality Scale Detector detects which quality encoding scheme was used in your reads and automatically enters the proper value in the \"Quality Scale\" metadata field.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          },
          "inputs": {
            "fastq": {
              "size": 0,
              "class": "File",
              "secondaryFiles": [],
              "path": "/path/to/fastq.ext"
            }
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/tziotas/sbg_fastq_quality_scale_detector:1.0"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911312
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911314
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911313
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911313
          }
        ],
        "stdin": "",
        "sbg:createdOn": 1450911312,
        "class": "CommandLineTool",
        "y": 287.2105521842058,
        "sbg:sbgMaintained": false,
        "sbg:validationErrors": [],
        "inputs": [
          {
            "required": true,
            "description": "FASTQ file.",
            "label": "Fastq",
            "id": "#fastq",
            "type": [
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fastq",
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:modifiedOn": 1450911314,
        "sbg:cmdPreview": "python /opt/sbg_fastq_quality_scale_detector.py --fastq /path/to/fastq.ext /path/to/fastq.ext",
        "sbg:modifiedBy": "bix-demo",
        "sbg:revision": 3,
        "id": "admin/sbg-public-data/sbg-fastq-quality-detector/3",
        "sbg:toolkit": "SBGTools",
        "sbg:license": "Apache License 2.0",
        "arguments": [],
        "successCodes": []
      },
      "id": "#SBG_FASTQ_Quality_Detector",
      "sbg:x": 276.54391547880846,
      "outputs": [
        {
          "id": "#SBG_FASTQ_Quality_Detector.result"
        }
      ],
      "scatter": "#SBG_FASTQ_Quality_Detector.fastq",
      "inputs": [
        {
          "id": "#SBG_FASTQ_Quality_Detector.fastq",
          "source": [
            "#fastq"
          ]
        }
      ]
    },
    {
      "sbg:y": 168.4737055953489,
      "run": {
        "baseCommand": [
          "fastqc"
        ],
        "sbg:project": "bix-demo/fastqc-0-11-4-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "x": 469.421140919306,
        "sbg:categories": [
          "FASTQ-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "temporaryFailCodes": [],
        "sbg:toolkitVersion": "0.11.4",
        "label": "FastQC",
        "outputs": [
          {
            "sbg:fileTypes": "ZIP",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_fastq",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "glob": "*_fastqc.zip"
            },
            "description": "Zip archive of the report",
            "label": "Report zip",
            "id": "#report_zip",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "HTML",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_fastq",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "glob": "*_fastqc.html"
            },
            "description": "HTML file containing report.",
            "label": "Report",
            "id": "#report_html",
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "requirements": [],
        "sbg:toolAuthor": "Babraham Institute",
        "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/2",
        "sbg:latestRevision": 2,
        "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data.\n\nFastQC is a tool which takes a FastQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          },
          "inputs": {
            "input_fastq": {
              "path": "/root/dir/example.fastq"
            }
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "759c4c8fbafd",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 2048,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911593
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911593
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911594
          }
        ],
        "stdin": "",
        "sbg:createdOn": 1450911593,
        "class": "CommandLineTool",
        "y": 168.4737055953489,
        "sbg:sbgMaintained": false,
        "sbg:links": [
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
            "label": "Homepage"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
            "label": "Source Code"
          },
          {
            "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
            "label": "Wiki"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
            "label": "Download"
          },
          {
            "id": "",
            "label": "Publication"
          }
        ],
        "sbg:validationErrors": [],
        "inputs": [
          {
            "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned!",
            "label": "Nogroup",
            "id": "#nogroup",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--nogroup",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
            "label": "Nano",
            "id": "#nano",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--nano",
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
            "sbg:altPrefix": "-l",
            "label": "Limits",
            "id": "#limits_file",
            "sbg:category": "",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--limits",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
            "sbg:altPrefix": "-f",
            "label": "Kmers",
            "sbg:toolDefaultValue": "7",
            "id": "#kmers",
            "sbg:category": "",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--kmers",
              "sbg:cmdInclude": true
            }
          },
          {
            "required": true,
            "description": "Input file.",
            "label": "Input file",
            "id": "#input_fastq",
            "sbg:category": "",
            "type": [
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "position": 100,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
            "sbg:altPrefix": "-f",
            "label": "Format",
            "id": "#format",
            "sbg:category": "",
            "type": [
              "null",
              {
                "symbols": [
                  "bam",
                  "sam",
                  "bam_mapped",
                  "sam_mapped",
                  "fastq"
                ],
                "type": "enum",
                "name": "format"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--format",
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:altPrefix": "-c",
            "label": "Contaminants",
            "id": "#contaminants_file",
            "sbg:category": "",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--contaminants",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
            "label": "Casava",
            "id": "#casava",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--casava",
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:altPrefix": "-a",
            "label": "Adapters",
            "id": "#adapters_file",
            "sbg:category": "",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--adapters",
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:modifiedOn": 1450911594,
        "sbg:cmdPreview": "fastqc  --noextract --outdir .  --quiet --threads 4  /root/dir/example.fastq /root/dir/example.fastq",
        "sbg:modifiedBy": "bix-demo",
        "sbg:revision": 2,
        "id": "admin/sbg-public-data/fastqc-0-11-4/2",
        "sbg:toolkit": "FastQC",
        "sbg:license": "GNU General Public License v3.0 only",
        "arguments": [
          {
            "separate": true,
            "prefix": "",
            "order": 1,
            "valueFrom": "--noextract"
          },
          {
            "separate": true,
            "prefix": "--outdir",
            "order": 3,
            "valueFrom": "."
          },
          {
            "separate": true,
            "prefix": "",
            "valueFrom": "--quiet"
          },
          {
            "separate": true,
            "prefix": "--threads",
            "valueFrom": "4"
          }
        ],
        "successCodes": []
      },
      "id": "#FastQC",
      "sbg:x": 469.421140919306,
      "outputs": [
        {
          "id": "#FastQC.report_zip"
        },
        {
          "id": "#FastQC.report_html"
        }
      ],
      "scatter": "#FastQC.input_fastq",
      "inputs": [
        {
          "id": "#FastQC.nogroup"
        },
        {
          "id": "#FastQC.nano"
        },
        {
          "id": "#FastQC.limits_file"
        },
        {
          "id": "#FastQC.kmers"
        },
        {
          "id": "#FastQC.input_fastq",
          "source": [
            "#SBG_FASTQ_Quality_Detector.result"
          ]
        },
        {
          "id": "#FastQC.format"
        },
        {
          "id": "#FastQC.contaminants_file"
        },
        {
          "id": "#FastQC.casava"
        },
        {
          "id": "#FastQC.adapters_file"
        }
      ]
    },
    {
      "sbg:y": 378.0000150203704,
      "run": {
        "baseCommand": [
          "/opt/bamtools/bin/bamtools",
          "index"
        ],
        "sbg:project": "bix-demo/bamtools-2-4-0-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "x": 1057.0000416040418,
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Indexing"
        ],
        "temporaryFailCodes": [],
        "sbg:toolkitVersion": "2.4.0",
        "label": "BamTools Index",
        "outputs": [
          {
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_bam_file",
              "sbg:metadata": {},
              "glob": {
                "script": "$job.inputs.input_bam_file.path\n \n",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".bai",
                ".bti"
              ]
            },
            "description": "Output BAM file with index (BAI or BTI) file.",
            "label": "Output BAM file",
            "id": "#output_bam_file",
            "type": [
              "File"
            ]
          }
        ],
        "sbg:homepage": "https://github.com/pezmaster31/bamtools/wiki",
        "sbg:toolAuthor": "Derek Barnett, Erik Garrison, Gabor Marth, and Michael Stromberg",
        "requirements": [
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:id": "admin/sbg-public-data/bamtools-index-2-4-0/1",
        "sbg:latestRevision": 1,
        "description": "BamTools Index creates an index file (BAI or BTI) for a BAM file.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          },
          "inputs": {
            "bti_format": true,
            "input_bam_file": {
              "size": 0,
              "class": "File",
              "secondaryFiles": [],
              "path": "input/input_bam.bam"
            }
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "f808163d4cd3",
            "dockerPull": "images.sbgenomics.com/markop/bamtools:2.4.0"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911459
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911459
          }
        ],
        "id": "admin/sbg-public-data/bamtools-index-2-4-0/1",
        "sbg:createdOn": 1450911459,
        "class": "CommandLineTool",
        "y": 378.0000150203704,
        "sbg:modifiedOn": 1450911459,
        "sbg:links": [
          {
            "id": "https://github.com/pezmaster31/bamtools",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/pezmaster31/bamtools/wiki",
            "label": "Wiki"
          }
        ],
        "sbg:validationErrors": [],
        "inputs": [
          {
            "required": true,
            "sbg:fileTypes": "BAM",
            "description": "The input BAM file.",
            "label": "Input BAM file",
            "id": "#input_bam_file",
            "sbg:category": "Input & Output",
            "type": [
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "-in",
              "position": 0,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Create (non-standard) BamTools index file (*.BTI). Default behavior is to create standard BAM index (*.BAI).",
            "label": "BTI format",
            "id": "#bti_format",
            "sbg:category": "Input & Output",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "-bti",
              "position": 1,
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:sbgMaintained": false,
        "sbg:cmdPreview": "/opt/bamtools/bin/bamtools index -in input/input_bam.bam -bti  input/input_bam.bam",
        "sbg:modifiedBy": "bix-demo",
        "sbg:revision": 1,
        "stdin": "",
        "sbg:toolkit": "BamTools",
        "sbg:license": "The MIT License",
        "arguments": [],
        "successCodes": []
      },
      "id": "#BamTools_Index",
      "sbg:x": 1057.0000416040418,
      "outputs": [
        {
          "id": "#BamTools_Index.output_bam_file"
        }
      ],
      "inputs": [
        {
          "id": "#BamTools_Index.input_bam_file",
          "source": [
            "#TopHat2.aligned"
          ]
        },
        {
          "id": "#BamTools_Index.bti_format"
        }
      ]
    },
    {
      "sbg:y": 507.8246864871713,
      "run": {
        "baseCommand": [
          "java",
          {
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          "-jar",
          "/opt/picard-tools-1.140/picard.jar",
          "CollectAlignmentSummaryMetrics"
        ],
        "sbg:project": "bix-demo/picard-1-140-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "x": 1052.991496920246,
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "temporaryFailCodes": [],
        "sbg:toolkitVersion": "1.140",
        "label": "Picard CollectAlignmentSummaryMetrics",
        "outputs": [
          {
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_bam",
              "sbg:metadata": {},
              "glob": "*.summary_metrics.txt",
              "secondaryFiles": [
                ""
              ]
            },
            "description": "File to which the output will be written.",
            "label": "Summary metrics",
            "id": "#summary_metrics",
            "type": [
              "File"
            ]
          }
        ],
        "requirements": [
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:id": "admin/sbg-public-data/picard-collectalignmentsummarymetrics-1-140/2",
        "sbg:latestRevision": 2,
        "description": "Picard CollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          },
          "inputs": {
            "reference": {
              "path": "/root/directory/example.fasta"
            },
            "metric_accumulation_level": [
              "ALL_READS"
            ],
            "memory_per_job": 0,
            "input_bam": {
              "path": "/root/folder/example.bam"
            }
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "eab0e70b6629",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911255
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911256
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911257
          }
        ],
        "stdin": "",
        "sbg:createdOn": 1450911255,
        "class": "CommandLineTool",
        "y": 507.8246864871713,
        "sbg:sbgMaintained": false,
        "sbg:links": [
          {
            "id": "http://broadinstitute.github.io/picard/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadinstitute/picard/releases/tag/1.140",
            "label": "Source Code"
          },
          {
            "id": "http://broadinstitute.github.io/picard/",
            "label": "Wiki"
          },
          {
            "id": "https://github.com/broadinstitute/picard/zipball/master",
            "label": "Download"
          },
          {
            "id": "http://broadinstitute.github.io/picard/",
            "label": "Publication"
          }
        ],
        "sbg:validationErrors": [],
        "inputs": [
          {
            "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "label": "Verbosity",
            "sbg:toolDefaultValue": "INFO",
            "id": "#verbosity",
            "sbg:category": "",
            "type": [
              "null",
              {
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "enum",
                "name": "verbosity"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "VERBOSITY=",
              "position": 6,
              "sbg:cmdInclude": true
            }
          },
          {
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "type": "enum",
                "name": "validation_stringency"
              }
            ],
            "label": "Validation stringency",
            "sbg:toolDefaultValue": "SILENT",
            "id": "#validation_stringency",
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "inputBinding": {
              "separate": false,
              "prefix": "VALIDATION_STRINGENCY=",
              "position": 4,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
            "label": "Stop after",
            "sbg:toolDefaultValue": "0",
            "id": "#stop_after",
            "sbg:category": "",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "STOP_AFTER=",
              "position": 9,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "sbg:fileTypes": "FASTA",
            "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated.  Default value: null.",
            "sbg:altPrefix": "R",
            "label": "Reference sequence",
            "id": "#reference",
            "sbg:category": "File inputs",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "REFERENCE_SEQUENCE=",
              "position": 3,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "label": "Quiet",
            "sbg:toolDefaultValue": "false",
            "id": "#quiet",
            "sbg:category": "",
            "type": [
              "null",
              {
                "symbols": [
                  "true",
                  "false"
                ],
                "type": "enum",
                "name": "quiet"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "QUIET=",
              "position": 4,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "sbg:altPrefix": "LEVEL",
            "label": "Metric accumulation level",
            "sbg:toolDefaultValue": "ALL_READS",
            "id": "#metric_accumulation_level",
            "sbg:category": "",
            "type": [
              "null",
              {
                "items": {
                  "symbols": [
                    "ALL_READS",
                    "SAMPLE",
                    "LIBRARY",
                    "READ_GROUP"
                  ],
                  "type": "enum",
                  "name": "metric_accumulation_level"
                },
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "METRIC_ACCUMULATION_LEVEL=",
              "position": 8,
              "itemSeparator": null,
              "sbg:cmdInclude": true
            }
          },
          {
            "sbg:toolDefaultValue": "2048",
            "id": "#memory_per_job",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
            "label": "Memory per job"
          },
          {
            "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
            "label": "Max records in RAM",
            "sbg:toolDefaultValue": "500000",
            "id": "#max_records_in_ram",
            "sbg:category": "",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "MAX_RECORDS_IN_RAM=",
              "position": 4,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
            "label": "Max insert size",
            "sbg:toolDefaultValue": "100000",
            "id": "#max_insert_size",
            "sbg:category": "",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "MAX_INSERT_SIZE=",
              "position": 9,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:altPrefix": "BS",
            "label": "Is bisulfite sequenced",
            "sbg:toolDefaultValue": "false",
            "id": "#is_bisulfite_sequenced",
            "sbg:category": "",
            "type": [
              "null",
              {
                "symbols": [
                  "true",
                  "false"
                ],
                "type": "enum",
                "name": "is_bisulfite_sequenced"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "BS=",
              "position": 8,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": true,
            "sbg:fileTypes": "BAM, SAM",
            "description": "Input SAM or BAM file.  Required.",
            "sbg:altPrefix": "I",
            "label": "Input file",
            "id": "#input_bam",
            "sbg:category": "File inputs",
            "type": [
              "File"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "INPUT=",
              "position": 0,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
            "label": "Compression level",
            "sbg:toolDefaultValue": "5",
            "id": "#compression_level",
            "sbg:category": "",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "COMPRESSION_LEVEL=",
              "position": 4,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:altPrefix": "AS",
            "label": "Assume sorted",
            "sbg:toolDefaultValue": "true",
            "id": "#assume_sorted",
            "sbg:category": "",
            "type": [
              "null",
              {
                "symbols": [
                  "true",
                  "false"
                ],
                "type": "enum",
                "name": "assume_sorted"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "ASSUME_SORTED=",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "label": "Adapter sequence",
            "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
            "id": "#adapter_sequence",
            "sbg:category": "",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "ADAPTER_SEQUENCE=",
              "position": 8,
              "itemSeparator": null,
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:modifiedOn": 1450911257,
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectAlignmentSummaryMetrics INPUT=/root/folder/example.bam REFERENCE_SEQUENCE=/root/directory/example.fasta OUTPUT=example.summary_metrics.txt METRIC_ACCUMULATION_LEVEL=ALL_READS INPUT=/root/folder/example.bam /root/folder/example.bam",
        "sbg:modifiedBy": "bix-demo",
        "sbg:revision": 2,
        "id": "admin/sbg-public-data/picard-collectalignmentsummarymetrics-1-140/2",
        "sbg:toolkit": "Picard",
        "sbg:license": "MIT License, Apache 2.0 Licence",
        "arguments": [
          {
            "separate": false,
            "prefix": "OUTPUT=",
            "position": 3,
            "valueFrom": {
              "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = $job.inputs.input_bam.path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "successCodes": []
      },
      "id": "#Picard_CollectAlignmentSummaryMetrics",
      "sbg:x": 1052.991496920246,
      "outputs": [
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
        }
      ],
      "inputs": [
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.verbosity"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.validation_stringency"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.stop_after"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.reference",
          "source": [
            "#fasta_reference"
          ]
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.quiet"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.metric_accumulation_level"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.memory_per_job"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.max_records_in_ram"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.max_insert_size"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.input_bam",
          "source": [
            "#TopHat2.aligned"
          ]
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.compression_level"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.assume_sorted"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.adapter_sequence"
        }
      ]
    },
    {
      "sbg:y": 311.99999999999994,
      "run": {
        "baseCommand": [
          "/opt/tophat-2.1.0.Linux_x86_64/tophat2"
        ],
        "sbg:project": "bix-demo/tophat-2-1-0-demo",
        "sbg:contributors": [
          "bix-demo",
          "ana_d"
        ],
        "x": 613.9999999999999,
        "sbg:categories": [
          "Alignment",
          "RNA"
        ],
        "temporaryFailCodes": [],
        "sbg:toolkitVersion": "2.1.0",
        "label": "TopHat2",
        "outputs": [
          {
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_unmapped.bam"
            },
            "description": "A list of unmapped reads in BAM format. It does not contain multi-mapped reads as opposed to versions prior to TopHat 2.0.9",
            "label": "Unmapped reads",
            "id": "#unmapped",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "BED",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_junctions.bed"
            },
            "description": "A UCSC BED track of junctions reported by TopHat. Each junction consists of two connected BED blocks, where each block is as long as the maximal overhang of any read spanning the junction. The score is the number of alignments spanning the junction.",
            "label": "TopHat Junctions",
            "id": "#tophat_junctions",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "BED",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_insertions.bed"
            },
            "description": "UCSC BED tracks of insertions reported by TopHat. ChromLeft refers to the last genomic base before the insertion.",
            "label": "TopHat Insertions",
            "id": "#tophat_insertions",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "BED",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_deletions.bed"
            },
            "description": "UCSC BED tracks of deletions reported by TopHat. ChromLeft refers to the last genomic base before the deletion.",
            "label": "TopHat Deletions",
            "id": "#tophat_deletions",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_accepted_hits.bam"
            },
            "description": "A list of read alignments in BAM format.",
            "label": "Aligned BAM",
            "id": "#aligned",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#read",
              "sbg:metadata": {},
              "glob": "tophat_out/*_align_summary.txt"
            },
            "description": "Containing read (pair) input and mapping counts.",
            "label": "Align Summary",
            "id": "#align_summary",
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "requirements": [
          {
            "value": 1000,
            "class": "MemoryRequirement"
          },
          {
            "engineCommand": "cwl-engine.js",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolAuthor": "Daehwan Kim, Steven Salzberg, Cole Trapnell/Johns Hopkins University, University of Washington",
        "sbg:id": "admin/sbg-public-data/tophat2/3",
        "sbg:latestRevision": 3,
        "description": "TopHat is a split-read aligner for RNA-seq expression data. It uses the short read aligner, Bowtie2, to align sequence reads to the genome. It then uses this alignment data to generate a database of potential splice junction sites. Finally, initially unmapped reads are mapped to splice junction sites. \n\nTopHat can also align reads directly to a transcriptome. If provided with annotation of known transcripts, TopHat constructs a virtual transcriptome and uses Bowtie2 to align reads to this reference first. Reads that do not align to the transcriptome are then mapped on the reference genome. The reads that did align on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings and junctions in the final output. \n\nThis version of TopHat only accepts reads in FASTQ format. It is optimized for reads that are at least 75bp long.",
        "sbg:job": {
          "allocatedResources": {
            "cpu": 8,
            "mem": 12000
          },
          "inputs": {
            "read": [
              {
                "metadata": {
                  "paired_end": "1"
                },
                "size": 0,
                "class": "File",
                "secondaryFiles": [],
                "path": "/test-data/mate1.fastq"
              },
              {
                "metadata": {
                  "paired_end": "2"
                },
                "secondaryFiles": [],
                "path": "/test-data/mate2.fastq"
              }
            ],
            "reference_index": [
              {
                "path": "/demo/test-files/chr20.1.bt2"
              },
              {
                "path": "/demo/test-files/chr20.2.bt2"
              }
            ],
            "b2_score_min_A": 0.5,
            "b2_i_F": "Natural log",
            "GTF": {
              "path": "/test/annotations.gtf"
            },
            "b2_rdg": [
              0
            ],
            "b2_rfg": [
              0
            ],
            "b2_preset": "Very sensitive",
            "b2_n_ceil_A": 1,
            "b2_i_A": 1,
            "b2_i_B": 1.15,
            "b2_n_ceil_F": "Natural log",
            "b2_mp": [
              0
            ],
            "b2_score_min_B": 0.5,
            "b2_score_min_F": "Constant",
            "b2_D": 5,
            "b2_n_ceil_B": 1
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "ec5ac2a1890a",
            "dockerPull": "images.sbgenomics.com/ana_d/tophat2:2.1.0"
          },
          {
            "value": 8,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 12000,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911590
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911591
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911592
          },
          {
            "sbg:modifiedBy": "ana_d",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1457434088
          }
        ],
        "stdin": "",
        "sbg:createdOn": 1450911590,
        "class": "CommandLineTool",
        "y": 311.99999999999994,
        "sbg:sbgMaintained": false,
        "sbg:links": [
          {
            "id": "https://ccb.jhu.edu/software/tophat/index.shtml",
            "label": "Homepage"
          },
          {
            "id": "https://ccb.jhu.edu/software/tophat/downloads/tophat-2.1.0.tar.gz",
            "label": "Source Code"
          },
          {
            "id": "https://ccb.jhu.edu/software/tophat/manual.shtml",
            "label": "Manual"
          },
          {
            "id": "http://www.genomebiology.com/2013/14/4/R36/abstract",
            "label": "Publication"
          }
        ],
        "sbg:validationErrors": [],
        "inputs": [
          {
            "description": "Only align the reads to the transcriptome and report only those mappings as genomic mappings. Requires a GTF input and/or transcriptome index.",
            "sbg:altPrefix": "-T",
            "label": "Transcriptome only",
            "sbg:toolDefaultValue": "False",
            "id": "#transcriptome_only",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--transcriptome-only",
              "position": 144,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Maximum number of mappings allowed for a read, when aligned to the transcriptome (any reads found with more then this number of mappings will be discarded).",
            "sbg:altPrefix": "-x",
            "label": "Transcriptome max hits",
            "sbg:toolDefaultValue": "60",
            "id": "#transcriptome_max_hits",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--transcriptome-max-hits",
              "position": 145,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment. Only values between 0 and 2 supported.",
            "sbg:altPrefix": "-m",
            "label": "Splice mismatches",
            "sbg:toolDefaultValue": "0",
            "id": "#splice_mismatches",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--splice-mismatches",
              "position": 111,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Read segments are mapped independently, allowing up to this many mismatches in each segment alignment.",
            "label": "Segment mismatches",
            "sbg:toolDefaultValue": "2",
            "id": "#segment_mismatches",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--segment-mismatches",
              "position": 125,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Each read is cut up into segments, each at least this long. These segments are mapped independently.",
            "label": "Segment length",
            "sbg:toolDefaultValue": "25",
            "id": "#segment_length",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--segment-length",
              "position": 126,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "By default TopHat reports best or primary alignments based on alignment scores (AS). Use this option if you want to output additional or secondary alignments (up to 20 alignments will be reported this way, this limit can be changed by using the \"Maximum multihits\" option from \"Basic Options\" category).",
            "label": "Report secondary alignments",
            "sbg:toolDefaultValue": "False",
            "id": "#report_secondary_alignments",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--report-secondary-alignments",
              "position": 118,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": true,
            "sbg:fileTypes": "BT2",
            "description": "Files produced by Bowtie2 indexer (<reference_name.X.bt2> files).",
            "label": "Index files",
            "id": "#reference_index",
            "sbg:category": "Input files",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ]
          },
          {
            "description": "Some of the reads spanning multiple exons may be mapped incorrectly as a contiguous alignment to the genome even though the correct alignment should be a spliced one - this can happen in the presence of processed pseudogenes that are rarely (if at all) transcribed or expressed. This option can direct TopHat to re-align reads for which the edit distance of an alignment obtained in a previous mapping step is above or equal to this option value. If you set this option to 0, TopHat will map every read in all the mapping steps (transcriptome if you provided gene annotations, genome, and finally splice variants detected by TopHat), reporting the best possible alignment found in any of these mapping steps. This may greatly increase the mapping accuracy at the expense of an increase in running time. The default value for this option is set such that TopHat will not try to realign reads already mapped in earlier steps.",
            "label": "Read realign edit distance",
            "sbg:toolDefaultValue": "\"Read edit distance\" + 1",
            "id": "#read_realign_edit_dist",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--read-realign-edit-dist",
              "position": 106,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Final read alignments having more than these many mismatches are discarded.",
            "sbg:altPrefix": "-N",
            "label": "Read mismatches",
            "sbg:toolDefaultValue": "2",
            "id": "#read_mismatches",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--read-mismatches",
              "position": 103,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Final read alignments having more than these many total length of gaps are discarded.",
            "label": "Read gap length",
            "sbg:toolDefaultValue": "2",
            "id": "#read_gap_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--read-gap-length",
              "position": 104,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Final read alignments having more than these many edit distance are discarded.",
            "label": "Read edit distance",
            "sbg:toolDefaultValue": "2",
            "id": "#read_edit_dist",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--read-edit-dist",
              "position": 105,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": true,
            "sbg:fileTypes": "FASTA, FASTQ, FA, FQ",
            "description": "Read sequence in FASTQ or FASTA format.",
            "label": "Read sequence",
            "id": "#read",
            "sbg:category": "Input files",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "read"
              }
            ],
            "inputBinding": {
              "separate": true,
              "position": 152,
              "itemSeparator": " ",
              "valueFrom": {
                "script": "{\t\n  var list = $job.inputs.read\n  \n  var resp = []\n  \n  if (list.length == 1){\n    resp.push(list[0].path)\n    \n  }else if (list.length == 2){    \n    \n    left = \"\"\n    right = \"\"\n      \n    for (index = 0; index < list.length; ++index) {\n      \n      if (list[index].metadata != null){\n        if (list[index].metadata.paired_end == 1){\n          left = list[index].path\n        }else if (list[index].metadata.paired_end == 2){\n          right = list[index].path\n        }\n      }\n    } \n    \n    if (left != \"\" && right != \"\"){      \n      resp.push(left)\n      resp.push(right)\n    }\n  }\n  \n  if(resp.length > 0){    \n    return resp.join(\" \")\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "sbg:fileTypes": "JUNCS",
            "description": "Supply TopHat with a list of raw junctions.",
            "sbg:altPrefix": "-j",
            "label": "Raw junctions",
            "id": "#raw_juncs",
            "sbg:category": "Input files",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--raw-juncs",
              "position": 141,
              "streamable": false,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "When mapping reads on the transcriptome, some repetitive or low complexity reads that would be discarded in the context of the genome may appear to align to the transcript sequences and thus may end up reported as mapped to those genes only. This option directs TopHat to first align the reads to the whole genome in order to determine and exclude such multi-mapped reads (according to the value of the \"Maximum multihits\" option).",
            "sbg:altPrefix": "-M",
            "label": "Prefilter multihits",
            "sbg:toolDefaultValue": "False",
            "id": "#prefilter_multihits",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--prefilter-multihits",
              "position": 146,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Output BAM is not coordinate-sorted.",
            "label": "Disable BAM sorting",
            "sbg:toolDefaultValue": "False",
            "id": "#no_sort_bam",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--no-sort-bam",
              "position": 132,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Only look for reads across junctions indicated in the supplied GTF/GFF or junctions file. Ignored unless one or both of these files are included.",
            "label": "No novel juncs",
            "sbg:toolDefaultValue": "False",
            "id": "#no_novel_juncs",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--no-novel-juncs",
              "position": 142,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Only look for reads across indels in the supplied indel file, or disable indel detection when no file has been provided.",
            "label": "No novel indels",
            "sbg:toolDefaultValue": "False",
            "id": "#no_novel_indels",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--no-novel-indels",
              "position": 149,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "For paired reads, only report read alignments if both reads in a pair can be mapped (by default, if TopHat cannot find a concordant or discordant alignment for both reads in a pair, it will find and report alignments for each read separately; this option disables that behavior).",
            "label": "Disable mixed alignments",
            "sbg:toolDefaultValue": "False",
            "id": "#no_mixed",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--no-mixed",
              "position": 120,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "For paired reads, report only concordant mappings.",
            "label": "Disable discordant alignments",
            "sbg:toolDefaultValue": "False",
            "id": "#no_discordant",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--no-discordant",
              "position": 119,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The minimum intron length that may be found during split-segment search.",
            "label": "Minimum segment intron",
            "sbg:toolDefaultValue": "50",
            "id": "#min_segment_intron",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--min-segment-intron",
              "position": 127,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "sbg:altPrefix": "-i",
            "label": "Minimum intron length",
            "sbg:toolDefaultValue": "50",
            "id": "#min_intron_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--min-intron-length",
              "position": 112,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The minimum intron length that may be found during coverage search.",
            "label": "Minimum coverage intron",
            "sbg:toolDefaultValue": "50",
            "id": "#min_coverage_intron",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--min-coverage-intron",
              "position": 129,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The \"anchor length\". TopHat will report junctions spanned by reads with at least this many bases on each side of the junction. Note that individual spliced alignments may span a junction with fewer than this many bases on one side. However, every junction involved in spliced alignments is supported by at least one read with this many bases on each side. This must be at least 3.",
            "sbg:altPrefix": "-a",
            "label": "Minimum anchor length",
            "sbg:toolDefaultValue": "8",
            "id": "#min_anchor_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--min-anchor",
              "position": 110,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "With this option, the pipeline will attempt to find alignments incident to micro-exons. Works only for reads 50bp or longer.",
            "label": "Microexon search",
            "sbg:toolDefaultValue": "False",
            "id": "#microexon_search",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--microexon-search",
              "position": 122,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum intron length that may be found during split-segment search.",
            "label": "Maximum segment intron",
            "sbg:toolDefaultValue": "500000",
            "id": "#max_segment_intron",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-segment-intron",
              "position": 128,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Instructs TopHat to allow up to this many alignments to the reference for a given read, and choose the alignments based on their alignment scores if there are more than this number. Unless you use \"Report secondary alignments\", TopHat will report the alignments with the best alignment score. If there are more alignments with the same score than this number, TopHat will randomly report only this many alignments. In case of using \"Report secondary alignments\", TopHat will try to report alignments up to this option value, and TopHat may randomly output some of the alignments with the same score to meet this number.",
            "sbg:altPrefix": "-g",
            "label": "Maximum multihits",
            "sbg:toolDefaultValue": "20",
            "id": "#max_multihits",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-multihits",
              "position": 118,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "sbg:altPrefix": "-I",
            "label": "Maximum intron length",
            "sbg:toolDefaultValue": "500000",
            "id": "#max_intron_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-intron-length",
              "position": 113,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum insertion length.",
            "label": "Maximum insertion length",
            "sbg:toolDefaultValue": "3",
            "id": "#max_insertion_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-insertion-length",
              "position": 114,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum deletion length.",
            "label": "Maximum deletion length",
            "sbg:toolDefaultValue": "3",
            "id": "#max_deletion_length",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-deletion-length",
              "position": 115,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The maximum intron length that may be found during coverage search.",
            "label": "Maximum coverage intron",
            "sbg:toolDefaultValue": "20000",
            "id": "#max_coverage_intron",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--max-coverage-intron",
              "position": 130,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The standard deviation for the distribution on inner distances between mate pairs.",
            "label": "Mate standard deviation",
            "sbg:toolDefaultValue": "20",
            "id": "#mate_std_dev",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--mate-std-dev",
              "position": 109,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "This is the expected (mean) inner distance between mate pairs. For, example, for paired end runs with fragments selected at 300bp, where each end is 50bp, you should set -r to be 200.",
            "sbg:altPrefix": "-r",
            "label": "Mate inner distance",
            "sbg:toolDefaultValue": "50",
            "id": "#mate_inner_dist",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--mate-inner-dist",
              "position": 108,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "The default is unstranded (fr-unstranded); i.e. Standard Illumina - Reads from the left-most end of the fragment (in transcript coordinates) map to the transcript strand, and the right-most end maps to the opposite strand. Consider supplying library type options below to select the correct RNA-seq protocol. When selecting fr-firststrand ( i.e. dUTP, NSR, NNSR) or fr-secondstrand (i.e. Ligation, Standard SOLiD) as a library type, see TopHat manual for more information.",
            "label": "Library type",
            "sbg:toolDefaultValue": "fr-unstranded",
            "id": "#library_type",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              {
                "symbols": [
                  "fr-unstranded",
                  "fr-firststrand",
                  "fr-secondstrand"
                ],
                "type": "enum",
                "name": "library_type"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--library-type",
              "position": 123,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "In order to sort alignments in the same order in the genome FASTA file, the option can be used. But this option will make the output SAM/BAM file incompatible with those from the previous versions of TopHat (1.4.1 or lower).",
            "label": "Keep FASTA order",
            "sbg:toolDefaultValue": "False",
            "id": "#keep_fasta_order",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--keep-fasta-order",
              "position": 131,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "sbg:fileTypes": "JUNCS, TAB, TXT",
            "description": "Supply TopHat with a list of insertions with respect to the reference. Indels are specified one per line, in a tab-delimited format, identical to that of junctions.",
            "label": "Insertions",
            "id": "#insertions",
            "sbg:category": "Input files",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--insertions",
              "position": 147,
              "streamable": false,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Turn on fusion mapping.",
            "label": "Fusion search",
            "sbg:toolDefaultValue": "False",
            "id": "#fusion_search",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--fusion-search",
              "position": 134,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Reads support fusions if they map across fusion with at most these many mismatches.",
            "label": "Fusion read mismatches",
            "sbg:toolDefaultValue": "2",
            "id": "#fusion_read_mismatches",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-read-mismatches",
              "position": 137,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Reads that map to more than these many places will be ignored. It may be possible that a fusion is supported by reads (or pairs) that map to multiple places.",
            "label": "Fusion multireads",
            "sbg:toolDefaultValue": "2",
            "id": "#fusion_multireads",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-multireads",
              "position": 138,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Pairs that map to more than these many places will be ignored.",
            "label": "Fusion multipairs",
            "sbg:toolDefaultValue": "2",
            "id": "#fusion_multipairs",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-multipairs",
              "position": 139,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "For intra-chromosomal fusions, TopHat-Fusion tries to find fusions separated by at least this distance.",
            "label": "Fusion minimum distance",
            "sbg:toolDefaultValue": "10000000",
            "id": "#fusion_min_dist",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-min-dist",
              "position": 136,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Ignore some chromosomes such as chrM when detecting fusion break points. Please check the correct names for chromosomes, that is, mitochondrial DNA is represented as chrM or M depending on the annotation you use. List chromosomes separated with commas.",
            "label": "Fusion ignore chromosomes",
            "id": "#fusion_ignore_chromosomes",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-ignore-chromosomes",
              "position": 140,
              "itemSeparator": ",",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "A \"supporting\" read must map to both sides of a fusion by at least these many bases.",
            "label": "Fusion anchor length",
            "sbg:toolDefaultValue": "20",
            "id": "#fusion_anchor_length",
            "sbg:category": "Fusion Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--fusion-anchor-length",
              "position": 135,
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "sbg:fileTypes": "JUNCS, TAB, TXT",
            "description": "Supply TopHat with a list of deletions with respect to the reference. Indels are specified one per line, in a tab-delimited format, identical to that of junctions.",
            "label": "Deletions",
            "id": "#deletions",
            "sbg:category": "Input files",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--deletions",
              "position": 148,
              "streamable": false,
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Disables or enables the coverage-based search for junctions. It is suggested to only enable coverage search for short reads (< 45bp) and with a small number of reads (<= 10 million).",
            "label": "Coverage search",
            "sbg:toolDefaultValue": "False",
            "id": "#coverage_search",
            "sbg:category": "Basic Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "position": 121,
              "valueFrom": {
                "script": "{\t\n  if ($job.inputs.coverage_search){\n    return \"--coverage-search\"\n  }else{\n    return \"--no-coverage-search\"\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "TopHat uses \"-v\" in Bowtie for initial read mapping (the default), but with this option, \"-n\" is used instead. Read segments are always mapped using \"-v\" option.",
            "label": "Bowtie -n",
            "sbg:toolDefaultValue": "False",
            "id": "#bowtie_n",
            "sbg:category": "Advanced Options",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "separate": false,
              "prefix": "--bowtie-n",
              "position": 124,
              "sbg:cmdInclude": true
            }
          },
          {
            "type": [
              "null",
              {
                "symbols": [
                  "Constant",
                  "Linear",
                  "Square-root",
                  "Natural log"
                ],
                "type": "enum",
                "name": "b2_score_min_F"
              }
            ],
            "label": "Function type",
            "sbg:toolDefaultValue": "Linear",
            "id": "#b2_score_min_F",
            "sbg:category": "Bowtie2 Alignment Score Function",
            "description": "Sets a function type F in function governing the minimum alignment score needed for an alignment to be considered \"valid\" (i.e. good enough to report). This is a function of read length. The minimum-score function f is f(x) = A + B * F(x), where x is the read length. By default, function F is set to \"Linear\", Constant A and Coefficient B to -0.6."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Coefficient B",
            "sbg:toolDefaultValue": "-0.6",
            "id": "#b2_score_min_B",
            "sbg:category": "Bowtie2 Alignment Score Function",
            "description": "Sets a coefficient B in function governing the minimum alignment score needed for an alignment to be considered 'valid' (i.e. good enough to report). This is a function of read length. The minimum-score function f is f(x) = A + B * F(x), where x is the read length."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Constant A",
            "sbg:toolDefaultValue": "-0.6",
            "id": "#b2_score_min_A",
            "sbg:category": "Bowtie2 Alignment Score Function",
            "description": "Sets a constant A in function governing the minimum alignment score needed for an alignment to be considered 'valid' (i.e. good enough to report). This is a function of read length. The minimum-score function f is f(x) = A + B * F(x), where x is the read length."
          },
          {
            "description": "Sets the reference gap open (first value) and extend (second value) penalty, respectively. A reference gap of length N gets a penalty of <gap-open-penalty> + N * <gap-extend-penalty>.",
            "label": "Reference gap penalties",
            "sbg:toolDefaultValue": "5,3",
            "id": "#b2_rfg",
            "sbg:category": "Bowtie2 Scoring Options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--b2-rfg",
              "itemSeparator": ",",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Sets the read gap open (first value) and extend (second value) penalty, respectively. A read gap of length N gets a penalty of <gap-open-penalty> + N * <gap-extend-penalty>.",
            "label": "Read gap penalties",
            "sbg:toolDefaultValue": "5,3",
            "id": "#b2_rdg",
            "sbg:category": "Bowtie2 Scoring Options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--b2-rdg",
              "itemSeparator": ",",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Preset options Bowtie2 to allow finer control of read mapping in end-to-end alignment mode (local alignment is not used in TopHat2). See the Bowtie2 manual for the alignment settings that correspond to each of the presets. Select \"Custom\" and set values in \"Bowtie2 Alignment Options\", \"Bowtie2 Scoring Options\" or \"Bowtie2 Effort Options\" categories to override preset values.",
            "label": "Bowtie2 preset",
            "sbg:toolDefaultValue": "Fast",
            "id": "#b2_preset",
            "sbg:category": "Bowtie2 Preset Options",
            "type": [
              "null",
              {
                "symbols": [
                  "Very fast",
                  "Fast",
                  "Sensitive",
                  "Very sensitive",
                  "Custom"
                ],
                "type": "enum",
                "name": "b2_preset"
              }
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  var preset_option = $job.inputs.b2_preset\n  \n  var presets = {\n    \"Very fast\": \"--b2-very-fast\",\n    \"Fast\": \"--b2-fast\",\n    \"Sensitive\": \"--b2-sensitive\",\n    \"Very sensitive\": \"--b2-very-sensitive\"\n  }\n  \n  if (preset_option && preset_option != \"Custom\"){\n    return presets[preset_option]\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Sets penalty for positions where the read, reference, or both, contain an ambiguous character such as N.",
            "label": "Ambiguous character penalty",
            "sbg:toolDefaultValue": "1",
            "id": "#b2_np",
            "sbg:category": "Bowtie2 Scoring Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--b2-np",
              "sbg:cmdInclude": true
            }
          },
          {
            "type": [
              "null",
              {
                "symbols": [
                  "Constant",
                  "Linear",
                  "Square-root",
                  "Natural log"
                ],
                "type": "enum",
                "name": "b2_n_ceil_F"
              }
            ],
            "label": "Function type",
            "sbg:toolDefaultValue": "Linear",
            "id": "#b2_n_ceil_F",
            "sbg:category": "Bowtie2 Ambiguous Chars Function",
            "description": "Sets a function type F in function governing the maximum number of ambiguous characters (usually Ns and/or .s) allowed in a read as a function of read length. The N-ceiling function f is f(x) = A + B * F(x), where x is the read length. Reads exceeding this ceiling are filtered out."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Coefficient B",
            "sbg:toolDefaultValue": "0.15",
            "id": "#b2_n_ceil_B",
            "sbg:category": "Bowtie2 Ambiguous Chars Function",
            "description": "Sets a coefficient B in function governing the maximum number of ambiguous characters (usually Ns and/or .s) allowed in a read as a function of read length. The N-ceiling function f is f(x) = A + B * F(x), where x is the read length. Reads exceeding this ceiling are filtered out."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Constant A",
            "sbg:toolDefaultValue": "0",
            "id": "#b2_n_ceil_A",
            "sbg:category": "Bowtie2 Ambiguous Chars Function",
            "description": "Sets a constant A in function governing the maximum number of ambiguous characters (usually Ns and/or .s) allowed in a read as a function of read length. The N-ceiling function f is f(x) = A + B * F(x), where x is the read length. Reads exceeding this ceiling are filtered out."
          },
          {
            "description": "Set maximum and minimum mismatch penalties, respectively.",
            "label": "Mismatch penalty",
            "sbg:toolDefaultValue": "6,2",
            "id": "#b2_mp",
            "sbg:category": "Bowtie2 Scoring Options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--b2-mp",
              "itemSeparator": ",",
              "sbg:cmdInclude": true
            }
          },
          {
            "type": [
              "null",
              {
                "symbols": [
                  "Constant",
                  "Linear",
                  "Square-root",
                  "Natural log"
                ],
                "type": "enum",
                "name": "b2_i_F"
              }
            ],
            "label": "Function type",
            "sbg:toolDefaultValue": "Square-root",
            "id": "#b2_i_F",
            "sbg:category": "Bowtie2 Interval Function",
            "description": "Sets a function type F in function f governing the interval between seed substrings, to use during multiseed alignment. The interval function f is f(x) = A + B * F(x), where x is the read length. By default, function F is set to 'Square-root', Constant A to 1 and Coefficient B to 1.25."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Coefficient B",
            "sbg:toolDefaultValue": "1.25",
            "id": "#b2_i_B",
            "sbg:category": "Bowtie2 Interval Function",
            "description": "Sets a coefficient B in function governing the interval between seed substrings to use during multiseed alignment. The interval function f is f(x) = A + B * F(x), where x is the read length."
          },
          {
            "type": [
              "null",
              "float"
            ],
            "label": "Constant A",
            "sbg:toolDefaultValue": "1",
            "id": "#b2_i_A",
            "sbg:category": "Bowtie2 Interval Function",
            "description": "Sets a constant A in function governing the interval between seed substrings to use during multiseed alignment. The interval function f is f(x) = A + B * F(x), where x is the read length."
          },
          {
            "description": "Disallow gaps within the given number of positions of the beginning or end of the read.",
            "label": "Disallow gaps",
            "sbg:toolDefaultValue": "4",
            "id": "#b2_gbar",
            "sbg:category": "Bowtie2 Alignment Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--b2-gbar",
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Given number is the maximum number of times Bowtie2 will 're-seed' reads with repetitive seeds. When 're-seeding', Bowtie2 simply chooses a new set of reads (same length, same number of mismatches allowed) at different offsets and searches for more alignments. A read is considered to have repetitive seeds if the total number of seed hits divided by the number of seeds that aligned at least once is greater than 300.",
            "label": "Max number of re-seed",
            "sbg:toolDefaultValue": "2",
            "id": "#b2_R",
            "sbg:category": "Bowtie2 Effort Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.b2_preset == \"Custom\" && $job.inputs.b2_R) {\n    return \"--b2-R \".concat($job.inputs.b2_R)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Sets the number of mismatches to allowed in a seed alignment during multiseed alignment. Can be set to 0 or 1. Setting this higher makes alignment slower (often much slower) but increases sensitivity.",
            "label": "Allowed mismatch number",
            "sbg:toolDefaultValue": "0",
            "id": "#b2_N",
            "sbg:category": "Bowtie2 Alignment Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.b2_preset == \"Custom\" && $job.inputs.b2_N) {\n    return \"--b2-N \".concat($job.inputs.b2_N)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Sets the length of the seed substrings to align during multiseed alignment. Smaller values make alignment slower but more senstive. Must be > 3 and < 32.",
            "label": "Seed substring length",
            "sbg:toolDefaultValue": "20",
            "id": "#b2_L",
            "sbg:category": "Bowtie2 Alignment Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.b2_preset == \"Custom\" && $job.inputs.b2_L) {\n    return \"--b2-L \".concat($job.inputs.b2_L)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "description": "Maximum number of to consecutive seed extension attempts that can \"fail\" before Bowtie2 moves on, using the alignments found so far. A seed extension \"fails\" if it does not yield a new best or a new second-best alignment.",
            "label": "Seed extension attempts",
            "sbg:toolDefaultValue": "15",
            "id": "#b2_D",
            "sbg:category": "Bowtie2 Effort Options",
            "type": [
              "null",
              "int"
            ],
            "inputBinding": {
              "separate": true,
              "valueFrom": {
                "script": "{\n  if ($job.inputs.b2_preset == \"Custom\" && $job.inputs.b2_D) {\n    return \"--b2-D \".concat($job.inputs.b2_D)\n  }\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              },
              "sbg:cmdInclude": true
            }
          },
          {
            "required": false,
            "sbg:fileTypes": "GTF",
            "description": "Supply TopHat with a set of gene model annotations and/or known transcripts, as a GTF 2.2 or GFF3 formatted file. If this option is provided, TopHat will first extract the transcript sequences and use Bowtie to align reads to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings and junctions in the final TopHat output.",
            "sbg:altPrefix": "-G",
            "label": "Annotations",
            "id": "#GTF",
            "sbg:category": "Input files",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "prefix": "--GTF",
              "position": 143,
              "streamable": false,
              "sbg:cmdInclude": true
            }
          }
        ],
        "stdout": "",
        "sbg:createdBy": "bix-demo",
        "sbg:modifiedOn": 1457434088,
        "sbg:cmdPreview": "/opt/tophat-2.1.0.Linux_x86_64/tophat2 --num-threads 8 --output-dir ./tophat_out    --b2-n-ceil G,1,1  --b2-score-min C,0.5,0.5  /demo/test-files/chr20  /test-data/mate1.fastq /test-data/mate2.fastq  && mv tophat_out/align_summary.txt tophat_out/mate_align_summary.txt && mv tophat_out/deletions.bed tophat_out/mate_deletions.bed && mv tophat_out/insertions.bed tophat_out/mate_insertions.bed && mv tophat_out/junctions.bed tophat_out/mate_junctions.bed && mv tophat_out/accepted_hits.bam tophat_out/mate_accepted_hits.bam && mv tophat_out/unmapped.bam tophat_out/mate_unmapped.bam",
        "sbg:modifiedBy": "ana_d",
        "sbg:revision": 3,
        "id": "admin/sbg-public-data/tophat2/3",
        "sbg:toolkit": "TopHat",
        "sbg:license": "Boost Software License 1.0",
        "arguments": [
          {
            "separate": true,
            "prefix": "--num-threads",
            "order": 117,
            "valueFrom": {
              "script": "$job.allocatedResources.cpu",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": false,
            "prefix": "",
            "order": 116,
            "valueFrom": {
              "script": "{\t\n  var list = $job.inputs.read\n  \n  if (list.length > 0){    \n\n    if (list[0].metadata != null){\n    \n      if(list[0].metadata.qual_scale == \"solexa\"){  \n        return \"--solexa-quals\"\n      }else if (list[0].metadata.qual_scale == \"illumina13\" || list[0].metadata.qual_scale == \"illumina15\"){\n        return \"--solexa1.3-quals\"\n      }\n    }\n    \n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "prefix": "--output-dir",
            "order": 107,
            "valueFrom": {
              "script": "\"./tophat_out\"",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 151,
            "valueFrom": {
              "script": "{\n  function sharedStart(array){\n    var A= array.concat().sort(), \n    a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n    while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n    return a1.substring(0, i);\n  }\n  \n  path_list = []\n  $job.inputs.reference_index.forEach(function(f){return path_list.push(f.path)})\n  common_prefix = sharedStart(path_list)\n  return common_prefix.substring(0, common_prefix.length - 1)\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  var functions = {\n    \"Constant\": \"C\",\n    \"Linear\": \"L\",\n    \"Square-root\": \"S\",\n    \"Natural log\": \"G\"\n  }\n  function_type = $job.inputs.b2_i_F\n  value_list = [functions[function_type], $job.inputs.b2_i_A, $job.inputs.b2_i_B]\n  if ($job.inputs.b2_preset == \"Custom\") {\n    if (functions[function_type] && $job.inputs.b2_i_A && $job.inputs.b2_i_B) {\n      return \"--b2-i \".concat(value_list.join(\",\"))\n    }\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  var functions = {\n    \"Constant\": \"C\",\n    \"Linear\": \"L\",\n    \"Square-root\": \"S\",\n    \"Natural log\": \"G\"\n  }\n  function_type = $job.inputs.b2_n_ceil_F\n  value_list = [functions[function_type], $job.inputs.b2_n_ceil_A, $job.inputs.b2_n_ceil_B]\n  if (functions[function_type] && $job.inputs.b2_n_ceil_A && $job.inputs.b2_n_ceil_B) {\n    return \"--b2-n-ceil \".concat(value_list.join(\",\"))\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  var functions = {\n    \"Constant\": \"C\",\n    \"Linear\": \"L\",\n    \"Square-root\": \"S\",\n    \"Natural log\": \"G\"\n  }\n  function_type = $job.inputs.b2_score_min_F\n  value_list = [functions[function_type], $job.inputs.b2_score_min_A, $job.inputs.b2_score_min_B]\n  if (functions[function_type] && $job.inputs.b2_score_min_A && $job.inputs.b2_score_min_B) {\n    return \"--b2-score-min \".concat(value_list.join(\",\"))\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 200,
            "valueFrom": {
              "script": "{\n  function sharedStart(array){\n  var A= array.concat().sort(), \n      a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n  }\n  path_list = []\n  $job.inputs.read.forEach(function(f){return path_list.push(f.path.replace(/\\\\/g,'/').replace( /.*\\//, '' ))})\n  common_prefix = sharedStart(path_list)\n  only_name = common_prefix.replace( /\\-$|\\_$|\\.$/, '' )\n  summary = \"&& mv tophat_out/align_summary.txt tophat_out/\".concat(only_name, \"_align_summary.txt\")\n  deletions = \"&& mv tophat_out/deletions.bed tophat_out/\".concat(only_name, \"_deletions.bed\")\n  insertions = \"&& mv tophat_out/insertions.bed tophat_out/\".concat(only_name, \"_insertions.bed\")\n  junctions = \"&& mv tophat_out/junctions.bed tophat_out/\".concat(only_name, \"_junctions.bed\")\n  hits = \"&& mv tophat_out/accepted_hits.bam tophat_out/\".concat(only_name, \"_accepted_hits.bam\")\n  unmapped = \"&& mv tophat_out/unmapped.bam tophat_out/\".concat(only_name, \"_unmapped.bam\")\n  command_list = [summary, deletions, insertions, junctions, hits, unmapped]\n  return command_list.join(\" \")\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "successCodes": []
      },
      "id": "#TopHat2",
      "sbg:x": 613.9999999999999,
      "outputs": [
        {
          "id": "#TopHat2.unmapped"
        },
        {
          "id": "#TopHat2.tophat_junctions"
        },
        {
          "id": "#TopHat2.tophat_insertions"
        },
        {
          "id": "#TopHat2.tophat_deletions"
        },
        {
          "id": "#TopHat2.aligned"
        },
        {
          "id": "#TopHat2.align_summary"
        }
      ],
      "inputs": [
        {
          "id": "#TopHat2.transcriptome_only"
        },
        {
          "id": "#TopHat2.transcriptome_max_hits"
        },
        {
          "id": "#TopHat2.splice_mismatches"
        },
        {
          "id": "#TopHat2.segment_mismatches"
        },
        {
          "id": "#TopHat2.segment_length"
        },
        {
          "id": "#TopHat2.report_secondary_alignments"
        },
        {
          "id": "#TopHat2.reference_index",
          "source": [
            "#Bowtie2_Indexer.bowtie_index_files"
          ]
        },
        {
          "id": "#TopHat2.read_realign_edit_dist"
        },
        {
          "id": "#TopHat2.read_mismatches"
        },
        {
          "id": "#TopHat2.read_gap_length"
        },
        {
          "id": "#TopHat2.read_edit_dist"
        },
        {
          "id": "#TopHat2.read",
          "source": [
            "#SBG_FASTQ_Quality_Detector.result"
          ]
        },
        {
          "id": "#TopHat2.raw_juncs"
        },
        {
          "id": "#TopHat2.prefilter_multihits"
        },
        {
          "id": "#TopHat2.no_sort_bam"
        },
        {
          "id": "#TopHat2.no_novel_juncs"
        },
        {
          "id": "#TopHat2.no_novel_indels"
        },
        {
          "id": "#TopHat2.no_mixed"
        },
        {
          "id": "#TopHat2.no_discordant"
        },
        {
          "id": "#TopHat2.min_segment_intron"
        },
        {
          "id": "#TopHat2.min_intron_length"
        },
        {
          "id": "#TopHat2.min_coverage_intron"
        },
        {
          "id": "#TopHat2.min_anchor_length"
        },
        {
          "id": "#TopHat2.microexon_search"
        },
        {
          "id": "#TopHat2.max_segment_intron"
        },
        {
          "id": "#TopHat2.max_multihits"
        },
        {
          "id": "#TopHat2.max_intron_length"
        },
        {
          "id": "#TopHat2.max_insertion_length"
        },
        {
          "id": "#TopHat2.max_deletion_length"
        },
        {
          "id": "#TopHat2.max_coverage_intron"
        },
        {
          "id": "#TopHat2.mate_std_dev"
        },
        {
          "id": "#TopHat2.mate_inner_dist"
        },
        {
          "id": "#TopHat2.library_type"
        },
        {
          "id": "#TopHat2.keep_fasta_order"
        },
        {
          "id": "#TopHat2.insertions"
        },
        {
          "id": "#TopHat2.fusion_search"
        },
        {
          "id": "#TopHat2.fusion_read_mismatches"
        },
        {
          "id": "#TopHat2.fusion_multireads"
        },
        {
          "id": "#TopHat2.fusion_multipairs"
        },
        {
          "id": "#TopHat2.fusion_min_dist"
        },
        {
          "id": "#TopHat2.fusion_ignore_chromosomes"
        },
        {
          "id": "#TopHat2.fusion_anchor_length"
        },
        {
          "id": "#TopHat2.deletions"
        },
        {
          "id": "#TopHat2.coverage_search"
        },
        {
          "id": "#TopHat2.bowtie_n"
        },
        {
          "id": "#TopHat2.b2_score_min_F"
        },
        {
          "id": "#TopHat2.b2_score_min_B"
        },
        {
          "id": "#TopHat2.b2_score_min_A"
        },
        {
          "id": "#TopHat2.b2_rfg"
        },
        {
          "id": "#TopHat2.b2_rdg"
        },
        {
          "id": "#TopHat2.b2_preset"
        },
        {
          "id": "#TopHat2.b2_np"
        },
        {
          "id": "#TopHat2.b2_n_ceil_F"
        },
        {
          "id": "#TopHat2.b2_n_ceil_B"
        },
        {
          "id": "#TopHat2.b2_n_ceil_A"
        },
        {
          "id": "#TopHat2.b2_mp"
        },
        {
          "id": "#TopHat2.b2_i_F"
        },
        {
          "id": "#TopHat2.b2_i_B"
        },
        {
          "id": "#TopHat2.b2_i_A"
        },
        {
          "id": "#TopHat2.b2_gbar"
        },
        {
          "id": "#TopHat2.b2_R"
        },
        {
          "id": "#TopHat2.b2_N"
        },
        {
          "id": "#TopHat2.b2_L"
        },
        {
          "id": "#TopHat2.b2_D"
        },
        {
          "id": "#TopHat2.GTF",
          "source": [
            "#GTF"
          ]
        }
      ]
    }
  ],
  "sbg:categories": [
    "Alignment",
    "RNA"
  ],
  "sbg:toolkitVersion": "2.1.0",
  "outputs": [
    {
      "required": true,
      "sbg:includeInPorts": true,
      "sbg:y": 447.4117862477023,
      "label": "alignment_file",
      "id": "#output_bam_file",
      "sbg:x": 1471.1176614200372,
      "source": [
        "#BamTools_Index.output_bam_file"
      ],
      "type": [
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 64.00000321237665,
      "label": "report_zip",
      "id": "#report_zip",
      "sbg:x": 612.3158208947433,
      "source": [
        "#FastQC.report_zip"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 191.2105357019525,
      "label": "report_html",
      "id": "#report_html",
      "sbg:x": 615.8947678616173,
      "source": [
        "#FastQC.report_html"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 167.9737006216722,
      "label": "unmapped",
      "id": "#unmapped",
      "sbg:x": 819.9475423474116,
      "source": [
        "#TopHat2.unmapped"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 157.22808452029008,
      "label": "tophat_junctions",
      "id": "#tophat_junctions",
      "sbg:x": 1162.122930359425,
      "source": [
        "#TopHat2.tophat_junctions"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 239.28071514556297,
      "label": "tophat_insertions",
      "id": "#tophat_insertions",
      "sbg:x": 1283.666839679087,
      "source": [
        "#TopHat2.tophat_insertions"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 320.0000127156575,
      "label": "tophat_deletions",
      "id": "#tophat_deletions",
      "sbg:x": 1405.3333890438078,
      "source": [
        "#TopHat2.tophat_deletions"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": false,
      "sbg:includeInPorts": true,
      "sbg:y": 541.0940563649879,
      "label": "align_summary",
      "id": "#align_summary",
      "sbg:x": 799.0690216913086,
      "source": [
        "#TopHat2.align_summary"
      ],
      "type": [
        "null",
        "File"
      ]
    },
    {
      "required": true,
      "sbg:includeInPorts": true,
      "sbg:y": 507.15799944896077,
      "label": "summary_metrics",
      "id": "#summary_metrics",
      "sbg:x": 1279.4914652966688,
      "source": [
        "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
      ],
      "type": [
        "File"
      ]
    }
  ],
  "requirements": [],
  "sbg:toolAuthor": "Seven Bridges Genomics",
  "sbg:id": "marko_zecevic/sbde1/rna-seq-alignment-tophat/1",
  "sbg:canvas_y": -17,
  "sbg:latestRevision": 1,
  "inputs": [
    {
      "id": "#fasta_reference",
      "sbg:x": 147.14036629492813,
      "sbg:y": 483.1141239251337,
      "type": [
        "File"
      ],
      "label": "fasta_reference"
    },
    {
      "sbg:includeInPorts": true,
      "sbg:y": 287.21055518755367,
      "label": "fastq",
      "batchType": "metadata.sample_id",
      "id": "#fastq",
      "sbg:x": 111.73685082042013,
      "type": [
        {
          "items": "File",
          "type": "array"
        }
      ]
    },
    {
      "id": "#GTF",
      "sbg:x": 429.2451240385283,
      "sbg:y": 543.4411838031276,
      "type": [
        "null",
        "File"
      ],
      "label": "gtf"
    }
  ],
  "hints": [
    {
      "value": "c3.2xlarge",
      "class": "sbg:AWSInstanceType"
    }
  ],
  "sbg:revisionsInfo": [
    {
      "sbg:modifiedBy": "marko_zecevic",
      "sbg:revision": 0,
      "sbg:revisionNotes": "Copy of admin/sbg-public-data/rna-seq-alignment-tophat/2",
      "sbg:modifiedOn": 1470746020
    },
    {
      "sbg:modifiedBy": "marko_zecevic",
      "sbg:revision": 1,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1470746159
    }
  ],
  "sbg:sbgMaintained": false,
  "sbg:createdOn": 1470746020,
  "sbg:canvas_zoom": 0.8499999999999999,
  "sbg:batchBy": {
    "criteria": [
      "metadata.sample_id"
    ],
    "type": "criteria"
  },
  "sbg:image_url": "https://brood.sbgenomics.com/static/marko_zecevic/sbde1/rna-seq-alignment-tophat/1.png",
  "class": "Workflow",
  "sbg:contributors": [
    "marko_zecevic"
  ],
  "sbg:modifiedOn": 1470746159,
  "sbg:validationErrors": [],
  "sbg:batchInput": "#fastq",
  "description": "RNA-Seq technology represents a powerful method to interrogate gene expression. In addition to determining total gene expression levels, RNA-Seq allows quantitation of isoforms, identification of novel transcripts, and interrogation of RNA editing events. The first step in profiling the transcriptome is the alignment of RNA-Seq reads against the reference genome. This step reveals the location in the genome from which the reads originated.\n\nThis pipeline uses the popular split-read aligner, TopHat, to map reads to a reference genome, and it is set up to accommodate the most common experimental conditions (e.g. RNA-Seq experiments of samples from well annotated transcriptomes such as Human and Mouse). It utilizes a transcript annotation file (GTF) to speed read mapping across known splice junctions. This pipeline will generate alignment files that can then be compared for differential expression, analyzed to discover novel transcripts, or viewed directly in a genome browser. TopHat is highly versatile and the Seven Bridges Platform allows you to build pipelines to exploit its many functions including the use of experimentally identified junctions, insertions and deletions, or for gene fusion detection.\n\nOn the Seven Bridges Platform, you can use this pipeline in combination with the \"RNA-Seq Differential Expression\" Public Pipeline to take you all the way from raw sequencing reads to a list of differentially expressed genes.\n\nAlignment of RNA-Seq reads to a reference genome is performed using the split read aligner TopHat. TopHat incorporates the ultrafast short read aligner Bowtie 2. While Bowtie 2 is able to align tens of millions of reads per CPU hour, it does not allow alignments between the read and genome to contain large gaps. This limitation precludes the use of Bowtie 2 to align reads that span introns. TopHat was built to overcome this restriction - any reads that cannot be initially aligned to the genome are broken up by TopHat into smaller pieces which, when processed independently can be aligned by Bowtie. When read segments are found to align to the genome far apart from each other, TopHat infers that the read spans a splice junction and estimates the location of the splice sites. While TopHat can build up an index of splice sites in the transcriptome without a priori gene or splice site annotations, alignment speed and accuracy is increased by providing this information during the mapping process. \n\nReads: This pipeline accepts both single stranded or paired-end RNA-Seq data in FASTQ format. If paired-end reads are used, the read pair metadata fields must be set as 1 and 2. The metadata field Sample ID should be unique for each biological sample.\nReference Genome: FASTA file containing reference genome. For Human samples we recommend \"ucsc.hg19.fasta\". \nFor proper TopHat performance (which relies on Bowtie 2 for alignment) Bowtie 2 requires that the reference genome is indexed before read alignment can be performed. We have added Bowtie 2 Indexer to this pipeline for reference file indexing. This indexing can be time intensive, and in order to optimize for execution time of this pipeline, you can index reference file separately using Bowtie 2 Indexer. You may create a short pipeline with this tool and reuse indexed files if you intend to perform several alignments with the same reference. In that case you will need to remove Bowtie 2 Indexer from this pipeline and add indexed file directly, as an input, to this pipeline. Note: multiple index files are generated by Bowtie 2 and the total number will depend on the genome assembly you are using. Simply provide all files to TopHat.\nTranscript Annotations (Suggested): Gene Transfer Format file containing known gene annotations. Using a GTF file will increase mapping speed and accuracy but it is not required. It is critical that the chromosome numbering schema used in the GTF file matches that used in the Reference file (UCSC convention is to number chromosomes as Chr _number_, whereas ensembl simply numbers chromosomes _number_). For Human samples we recommend Ensembl gene annotations with chromosome names converted to be compatible with the UCSC format \"human_hg19_genes.2014.gtf\".",
  "sbg:createdBy": "marko_zecevic",
  "sbg:license": "Apache License 2.0",
  "label": "RNA-seq Alignment - TopHat",
  "sbg:modifiedBy": "marko_zecevic",
  "sbg:revision": 1,
  "id": "https://api.sbgenomics.com/v2/apps/marko_zecevic/sbde1/rna-seq-alignment-tophat/1/raw/",
  "sbg:toolkit": "TopHat"
}